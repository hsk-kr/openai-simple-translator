import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { getCookies } from "cookies-next";
import { TmpCookiesObj } from "cookies-next/lib/types";
import { GetServerSideProps } from "next";

interface PageProps {
  cookies: TmpCookiesObj;
}

export const getServerSideProps: GetServerSideProps<PageProps> = async (
  context
) => {
  const cookies = getCookies({
    req: context.req,
    res: context.res,
  });
  return {
    props: {
      cookies,
    },
  };
};

export default function Home({ cookies }: PageProps) {
  const [translating, setTranslating] = useState(false);
  const keyInputRef = useRef<HTMLInputElement>(null);
  const messageInputRef = useRef<HTMLTextAreaElement>(null);
  const resultTextRef = useRef<HTMLDivElement>(null);
  const key = cookies["key"];
  const keyRegistered = key !== undefined;

  const handleRegisterClick = async () => {
    if (keyRegistered) {
      await fetch("api/key/unregister");
      location.reload();
    } else {
      const key = keyInputRef.current?.value.trim() || "";

      if (!key?.length) {
        alert("Enter your key");
        return;
      }

      await fetch("api/key/register", {
        method: "post",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          key,
        }),
      });
    }
    location.reload();
  };

  const translate = async () => {
    setTranslating(true);
    try {
      const res = await fetch("api/translate/german", {
        method: "post",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          message: messageInputRef.current?.value || "",
        }),
      });
      const json = await res.json();

      if (resultTextRef.current) {
        resultTextRef.current.innerText = json.message || "";
      }
    } finally {
      setTranslating(false);
    }
  };

  useEffect(() => {
    if (!keyInputRef.current) return;

    keyInputRef.current.value = key || "";
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <>
      <Head>
        <title>Translator</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="w-3/6 mx-auto mt-8 ">
        <section className="border p-4 mb-4">
          <div className="flex items-center">
            <label className="w-44">Open AI Secret Key</label>
            <input
              ref={keyInputRef}
              type="text"
              placeholder="Enter your key"
              className="border h-8 p-2 disabled:opacity-50"
              disabled={keyRegistered}
            />
          </div>
          <button
            type="button"
            className="border bg-sky-500 text-white p-2 rounded hover:opacity-70"
            onClick={handleRegisterClick}
          >
            {keyRegistered ? "Unregister" : "Register"}
          </button>
        </section>
        <section className="border p-4">
          <div className="flex flex-col gap-y-2">
            <label className="w-44">English</label>
            <textarea
              placeholder="Input"
              className="border h-32 p-4"
              ref={messageInputRef}
            ></textarea>
          </div>
          <button
            type="button"
            className="border bg-sky-500 text-white p-2 rounded hover:opacity-70 mt-4 disabled:opacity-25"
            disabled={!keyRegistered || translating}
            onClick={translate}
          >
            Translate
          </button>
          <div
            className="border w-100 h-60 mt-4 p-4 overflow-y-auto"
            ref={resultTextRef}
          >
            Result
          </div>
        </section>
      </main>
    </>
  );
}
